name: build-and-release-pipeline
on: 
  push:
    branches:
      - main
      - 'release/**'
    tags:
      - v*
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Setup Go environment
        uses: actions/setup-go@v3
        with:
          go-version: '1.19.4'
      - name: Build RestService
        run: go build
        working-directory: ./src/restService
      # - uses: actions/checkout@v2
      # - name: Run Unit Tests
      #   run: go test

  # webapp:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repo
  #       uses: actions/checkout@v2
  #     - name: Setup NodeJS
  #       uses: actions/setup-node@master
  #     - name: Install dependencies
  #       run: npm install
  #       working-directory: ./src/webapp
  #     - name: Build WebApp
  #       run: npm run build
  #       working-directory: ./src/webapp
  #     - name: Package build
  #       run: tar zcf webapp-package.tar.gz *
  #       working-directory: ./src/webapp/dist
  #     - name: release
  #       uses: actions/create-release@v1
  #       id: create_release
  #       with:
  #         draft: true
  #         prerelease: true
  #         release_name: ${{ steps.version.outputs.version }}
  #         tag_name: ${{ github.ref }}
  #         # body_path: CHANGELOG.md
  #       env:
  #         GITHUB_TOKEN: ${{ github.token }}
  #     - name: upload webapp artifact
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ github.token }}
  #       with:
  #         upload_url: ${{ steps.create_release.outputs.upload_url }}
  #         asset_path: ./src/webapp/dist/webapp-package.tar.gz
  #         asset_name: webapp-package.tar.gz
  #         asset_content_type: application/gzip
      
  release-dev:
    runs-on: ubuntu-latest
    needs: test
    if: ${{ !startsWith(github.ref, 'refs/tags') }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Extract Version
        id: version_step
        run: |
          echo "version_tag=$(echo ${{ github.actor }}_dev | tr '[:upper:]' '[:lower:]'"}" >> $GITHUB_ENV
      - name: Print Version
        run: |
          echo ${{ env.version_tag }}
          echo ${{ github.actor }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
      - name: Build Container Image
        run: docker build . --tag ghcr.io/mstraubac/smarthomerestapp_restservice:${{ env.version_tag }}
        working-directory: ./src/restService
      - name: Push Container Image to registry
        run: docker push ghcr.io/mstraubac/smarthomerestapp_restservice:${{ env.version_tag }}
        working-directory: ./src/restService

  release-stable:
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags')
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Extract Version
        id: version_step
        run: |
          echo "version=${GITHUB_REF#$"refs/tags/v"}" >> $GITHUB_OUTPUT
          echo "version_tag=$GITHUB_REPOSITORY:${GITHUB_REF#$"refs/tags/v"}" >> $GITHUB_OUTPUT
          echo "latest_tag=$GITHUB_REPOSITORY:latest" >> $GITHUB_OUTPUT
      - name: Print Version
        run: |
          echo ${{steps.version_step.outputs.version_tag}}
          echo ${{steps.version_step.outputs.latest_tag}}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
      - name: Build Container Image
        run: docker build . --tag ghcr.io/mstraubac/smarthomerestapp_restservice:latest
        working-directory: ./src/restService
      - name: Push Container Image to registry
        run: docker push ghcr.io/mstraubac/smarthomerestapp_restservice:latest
        working-directory: ./src/restService

      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v1

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v1

      # - name: PrepareReg Names
      #   id: read-docker-image-identifiers
      #   run: |
      #     echo VERSION_TAG=$(echo ${{ steps.version_step.outputs.version_tag }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV
      #     echo LASTEST_TAG=$(echo ${{ steps.version_step.outputs.latest_tag  }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV
      # - name: Build and push
      #   id: docker_build
      #   uses: docker/build-push-action@v2
      #   with:
      #     push: true
      #     tags: |
      #       ${{env.VERSION_TAG}}
      #       ${{env.LASTEST_TAG}}
      #     build-args: |
      #       ${{steps.version_step.outputs.version}}